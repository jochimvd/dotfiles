#!/usr/bin/env bash

# Function to display usage information
print_usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  --cycle          Cycle to the next audio sink.
  --help           Display this help message and exit.

If no options are provided, the script will display a sink selection menu.
EOF
    exit 1
}

# Function to cycle to the next sink
cycle_to_next_sink() {
    sinks=$(pactl -f json list sinks | jq '[.[] | select((.ports | length == 0) or ([.ports[]? | .availability != "not available"] | any))]')
    sinks_count=$(echo "$sinks" | jq '. | length')

    if [ "$sinks_count" -eq 0 ]; then
        echo "No audio devices found"
        exit 1
    fi

    current_sink_name=$(pactl get-default-sink)
    current_sink_index=$(echo "$sinks" | jq -r --arg name "$current_sink_name" 'map(.name) | index($name)')

    if [ "$current_sink_index" != "null" ]; then
        next_sink_index=$(((current_sink_index + 1) % sinks_count))
    else
        next_sink_index=0
    fi

    next_sink=$(echo "$sinks" | jq -r ".[$next_sink_index]")
    next_sink_name=$(echo "$next_sink" | jq -r '.name')
    next_sink_description=$(echo "$next_sink" | jq -r '.description')

    if [ "$next_sink_name" != "$current_sink_name" ]; then
        pactl set-default-sink "$next_sink_name"
    fi

    echo "Switched to sink: $next_sink_description ($next_sink_name)"
}

# Function to play a chime sound
play_chime() {
    if command -v speaker-test &> /dev/null; then
        # Send low-freq primer to wake audio
        speaker-test -t sine -f 50 -l 1 >/dev/null 2>&1 & primer_pid=$!
        sleep 0.01
        kill -9 $primer_pid

        sleep 0.2
        
        # Main chime
        speaker-test -t sine -f 800 -l 1 >/dev/null 2>&1 & pid=$!
        sleep 0.05
        kill -9 $pid
    else
        echo "speaker-test command not found."
    fi
}

# Function to select a sink using a menu
select_sink() {
    selected_nick=$(pactl --format=json list sinks | jq -r '.[].properties."node.nick"' | walker --dmenu --theme dmenu_small)

    if [ "$selection" = "CNCLD" ] || [ -z "$selected_nick" ]; then
        exit 1
    fi

    sink_name=$(pactl --format=json list sinks | jq -r ".[] | select(.properties.\"node.nick\" == \"$selected_nick\") | .name")

    if [ -n "$sink_name" ]; then
        pactl set-default-sink "$sink_name"
        actual_sink=$(pactl get-default-sink)
        echo "Default sink set to: $actual_sink"
    else
        echo "No matching sink found for: $selected_nick"
        exit 1
    fi
}

# Main script logic
if [ $# -eq 0 ]; then
    select_sink
    play_chime
    exit 0
fi

while [ $# -gt 0 ]; do
    case "$1" in
        --cycle)
            cycle_to_next_sink
            play_chime
            exit 0
            ;;
        --chime)
            play_chime
            exit 0
            ;;
        --help)
            print_usage
            ;;
        *)
            echo "Unknown option: $1"
            print_usage
            ;;
    esac
    shift
done
#!/usr/bin/env sh

# Function to display usage information
print_usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  --cycle          Cycle to the next audio sink.
  --help           Display this help message and exit.

If no options are provided, the script will display a sink selection menu.
EOF
    exit 1
}

# Function to cycle to the next sink
cycle_to_next_sink() {
    # Get all sink names
    sink_names=$(pactl --format=json list sinks | jq -r '.[].name')

    # Get the current default sink
    current_sink=$(pactl get-default-sink)

    # Create an array of sinks
    IFS=$'\n' read -d '' -r -a sinks <<< "$sink_names"

    # Find the index of the current sink
    current_index=-1
    for i in "${!sinks[@]}"; do
        if [ "${sinks[i]}" = "$current_sink" ]; then
            current_index=$i
            break
        fi
    done

    # Initialize variables for the loop
    tries=0
    max_tries=${#sinks[@]}
    next_index=$current_index

    while [ $tries -lt $max_tries ]; do
        # Calculate the next index
        next_index=$(( (next_index + 1) % ${#sinks[@]} ))

        # Set the next sink as default
        pactl set-default-sink "${sinks[next_index]}"

        # Get the actual default sink after setting
        actual_next_sink=$(pactl get-default-sink)

        # If the sink changed, break the loop
        if [ "$actual_next_sink" != "$current_sink" ]; then
            echo "Switched to: $actual_next_sink"
            break
        fi

        tries=$((tries + 1))
    done

    if [ $tries -eq $max_tries ]; then
        echo "Tried all sinks but couldn't change. Staying on: $current_sink"
    fi
}

# Function to play a chime sound
play_chime() {
    if command -v speaker-test &> /dev/null; then
        speaker-test -t sine -f 250 -l 1 & sleep .2 && kill -9 $!
    else
        echo "speaker-test command not found."
    fi
}

# Function to select a sink using a menu
select_sink() {
    selected_nick=$(pactl --format=json list sinks | jq -r '.[].properties."node.nick"' | rofi -dmenu -theme $XDG_CONFIG_HOME/rofi/config.rasi)

    if [ -z "$selected_nick" ]; then
        exit 1
    fi

    sink_name=$(pactl --format=json list sinks | jq -r ".[] | select(.properties.\"node.nick\" == \"$selected_nick\") | .name")

    if [ -n "$sink_name" ]; then
        pactl set-default-sink "$sink_name"
        actual_sink=$(pactl get-default-sink)
        echo "Default sink set to: $actual_sink"
    else
        echo "No matching sink found for: $selected_nick"
        exit 1
    fi
}

# Main script logic
if [ $# -eq 0 ]; then
    select_sink
    play_chime
    exit 0
fi

while [ $# -gt 0 ]; do
    case "$1" in
        --cycle)
            cycle_to_next_sink
            play_chime
            exit 0
            ;;
        --chime)
            play_chime
            exit 0
            ;;
        --help)
            print_usage
            ;;
        *)
            echo "Unknown option: $1"
            print_usage
            ;;
    esac
    shift
done